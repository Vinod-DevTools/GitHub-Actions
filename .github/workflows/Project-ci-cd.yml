name: Node CI + AWS EC2 Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
##############################################################################
# 1️⃣  TEST
###############################################################################
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm install
      - run: npm test

###############################################################################
# 2️⃣  BUILD  (after tests)
###############################################################################
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm install --omit=dev
      - run: npm pack                      # → simple‑calculator‑x.y.z.tgz
      - uses: actions/upload-artifact@v4
        with:
          name: calculator-tarball
          path: "*.tgz"
          if-no-files-found: error

###############################################################################
# 3️⃣  DEPLOY  to AWS EC2 (key‑based SSH)
###############################################################################
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: calculator-tarball
          path: ./dist

      - run: |
          mkdir -p ./deploy
          tar -xzf ./dist/*.tgz -C ./deploy --strip-components=1
          ls -R ./deploy

      # Add the EC2 private key to the SSH agent
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AWS_EC2_SSH_KEY }}

      # Copy files to EC2 (skip host‑key prompt)
      - name: Copy to AWS EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" --delete ./deploy/ \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:${{ secrets.AWS_EC2_PATH }}/

      # Install deps & start the app in foreground (nohup keeps it alive)
      - name: Remote install & start
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} <<'EOF'
              cd ${{ secrets.AWS_EC2_PATH }}
              npm install --omit=dev
              pkill node || true
              nohup node app.js > out.log 2>&1 &
              echo "App started"
          EOF
